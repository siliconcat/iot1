# -*- mode: ruby -*-
# vi: set ft=ruby :

# Setup script
$setupscript = <<END
  # Hardlock domain name
  echo 'supercede domain-name "silicon.cat";' > /etc/dhcp/dhclient.conf

  # Install etc/hosts for convenience
  #cp /vagrant/etc-puppet/hosts /etc/hosts

  # Install puppet.conf in user directory to quiet deprecation warnings
  #mkdir -p /home/vagrant/.puppetlabs/etc/puppet
  #cp /vagrant/etc-puppet/puppet.conf /home/vagrant/.puppetlabs/etc/puppet
  #chown -R vagrant:vagrant /home/vagrant/.puppetlabs

  # Install example hiera settings in global directory
  mkdir -p /etc/puppetlabs/puppet
  #cp -r /vagrant/etc-puppet/* /etc/puppetlabs/puppet/
  mkdir -p /etc/puppetlabs/code
  chown -R vagrant:vagrant /etc/puppetlabs

  # Provide the URL to the Puppet Labs yum repo on login
  echo "
You should start by enabling the Puppet Labs Puppet Collection 1 release repo
   wget https://apt.puppetlabs.com/puppetlabs-release-pc1-trusty.deb
sudo dpkg -i puppetlabs-release-pc1-trusty.deb
sudo apt-get update

Then install Puppet 4 and its companion packages
   sudo apt-get install -y puppet-agent
   
" > /etc/motd
  # Enable MotD
  sed -i -e 's/^PrintMotd no/PrintMotd yes/' /etc/ssh/sshd_config
  stop sshd
  start sshd
END

$setup_puppet = <<END
echo 'supercede domain-name "silicon.cat";' > /etc/dhcp/dhclient.conf

wget https://apt.puppetlabs.com/puppetlabs-release-pc1-trusty.deb
sudo dpkg -i puppetlabs-release-pc1-trusty.deb
sudo apt-get update
sudo apt-get install -y puppet-agent
END

$setup_puppet_master = <<END
echo 'supercede domain-name "silicon.cat";' > /etc/dhcp/dhclient.conf

wget https://apt.puppetlabs.com/puppetlabs-release-pc1-trusty.deb
sudo dpkg -i puppetlabs-release-pc1-trusty.deb
sudo apt-get update
sudo apt-get install puppetmaster-passenger
END

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "ubuntu/trusty64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.
  config.vm.provider :virtualbox do |vb|
    vb.customize ["modifyvm", :id, "--natdnsproxy1", "off"]
    vb.customize ["modifyvm", :id, "--natdnshostresolver1", "off"]
  end

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   sudo apt-get update
  #   sudo apt-get install -y apache2
  # SHELL

# clients
  config.vm.define "client", primary: true do |client|
    client.vm.hostname = "client.silicon.cat"
    client.vm.network :private_network, ip: "192.168.250.10"
    client.vm.provision "shell", inline: $setupscript
  end

  config.vm.define "webserver", primary: true do |webserver|
    webserver.vm.hostname = "webserver.silicon.cat"
    webserver.vm.network :private_network, ip: "192.168.250.20"
    webserver.vm.provision "shell", inline: $setupscript
  end

  # A puppetmaster
  config.vm.define "puppetmaster", autostart: false do |puppetmaster|
    puppetmaster.vm.hostname = "puppetmaster.silicon.cat"
    puppetmaster.vm.network :private_network, ip: "192.168.250.5"
    puppetmaster.vm.provision "shell", inline: $setup_puppet_master
  end

  # Puppet Server
  config.vm.define "puppetserver", autostart: false do |puppetserver|
    puppetserver.vm.hostname = "puppetserver.silicon.cat"
    puppetserver.vm.network :private_network, ip: "192.168.250.6"
    puppetserver.vm.provision "shell", inline: $setupscript
    puppetserver.vm.provider :virtualbox do |ps|
      ps.memory = 1024
    end
  end
end


